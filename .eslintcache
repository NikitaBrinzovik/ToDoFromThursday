[{"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\index.tsx":"1","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\Login\\Login.tsx":"2","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"3","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\TodolistsList\\todolists-reducer.ts":"4","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\TodolistsList\\TodolistsList.tsx":"5","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\components\\EditableSpan\\EditableSpan.tsx":"6","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\app\\app-reducer.ts":"7","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\Login\\auth-Reducer.ts":"8","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\api\\todolists-api.ts":"9","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\utils\\error-utils.ts":"10","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\TodolistsList\\tasks-reducer.ts":"11"},{"size":561,"mtime":1639390545876,"results":"12","hashOfConfig":"13"},{"size":5283,"mtime":1639390520504,"results":"14","hashOfConfig":"13"},{"size":1304,"mtime":1631444791798,"results":"15","hashOfConfig":"13"},{"size":6758,"mtime":1631607027103,"results":"16","hashOfConfig":"13"},{"size":4292,"mtime":1631607027071,"results":"17","hashOfConfig":"13"},{"size":952,"mtime":1629332373452,"results":"18","hashOfConfig":"13"},{"size":2076,"mtime":1639388895507,"results":"19","hashOfConfig":"13"},{"size":1973,"mtime":1639390730815,"results":"20","hashOfConfig":"13"},{"size":2996,"mtime":1639390635996,"results":"21","hashOfConfig":"13"},{"size":794,"mtime":1631604195334,"results":"22","hashOfConfig":"13"},{"size":7325,"mtime":1631607027115,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"oqhaep",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\index.tsx",[],["50","51"],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\Login\\Login.tsx",["52"],"\r\n//переписать все импорты грамматно: из библиотек тянуть только нужные файлы\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-Reducer\";\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    // lib FORMIK\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Введите пароль. Обязательное поле';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Пароль должен быть больше 3 символов';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            //alert(JSON.stringify(values, null,2))\r\n            formik.resetForm();// зачистить поля после подтверждения формы\r\n        }\r\n    })\r\n\r\n    //проверка на залогиненость и возможный редирект\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    //lib material-ui\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n\r\n                {/*оборачиваем обычным тегом форм, чтоб подвязать с формиком*/}\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n\r\n                            //для формика:\r\n                            type=\"email\"\r\n\r\n                            /*этот код заменим на короткую запись - см 6строчек ниже\r\n                            name=\"email\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                            //доп для валидации\r\n                            onBlur={formik.handleBlur}*/\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {/*VALIDATION: если поле тронутое, но ввод не закончен & если невалидный ввод*/}\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{\"color\": \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n\r\n                            /*этот код заменим на короткую запись- см 7строчек ниже\r\n                            //для формика:\r\n                            name=\"password\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                            //доп для валидации\r\n                            onBlur={formik.handleBlur}*/\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {/*VALIDATION*/}\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{\"color\": \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n//---------TYPES------------\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\TodolistsList\\todolists-reducer.ts",[],["53","54"],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\TodolistsList\\TodolistsList.tsx",["55","56","57","58","59","60","61","62"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }//demo from storybook\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    //проверка на залогиненость и возможный редирект\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n\r\n//-----------types---------\r\ntype PropsType = {\r\n    demo?: boolean\r\n}","C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\app\\app-reducer.ts",[],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\Login\\auth-Reducer.ts",[],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\api\\todolists-api.ts",[],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\utils\\error-utils.ts",[],"C:\\Users\\knana\\Рабочий стол\\ToDoFromThursday\\src\\features\\TodolistsList\\tasks-reducer.ts",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":56,"column":28,"nodeType":"69","endLine":56,"endColumn":45},{"ruleId":"63","replacedBy":"70"},{"ruleId":"65","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":32,"column":8,"nodeType":"74","endLine":32,"endColumn":10,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":37,"column":8,"nodeType":"74","endLine":37,"endColumn":10,"suggestions":"77"},{"ruleId":"72","severity":1,"message":"76","line":42,"column":8,"nodeType":"74","endLine":42,"endColumn":10,"suggestions":"78"},{"ruleId":"72","severity":1,"message":"76","line":47,"column":8,"nodeType":"74","endLine":47,"endColumn":10,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"76","line":52,"column":8,"nodeType":"74","endLine":52,"endColumn":10,"suggestions":"80"},{"ruleId":"72","severity":1,"message":"76","line":57,"column":8,"nodeType":"74","endLine":57,"endColumn":10,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"76","line":62,"column":8,"nodeType":"74","endLine":62,"endColumn":10,"suggestions":"82"},{"ruleId":"72","severity":1,"message":"76","line":67,"column":8,"nodeType":"74","endLine":67,"endColumn":10,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["84"],["85"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["86"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["87"],["88"],["89"],["90"],["91"],["92"],["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"96","fix":"98"},{"desc":"96","fix":"99"},{"desc":"96","fix":"100"},{"desc":"96","fix":"101"},{"desc":"96","fix":"102"},{"desc":"96","fix":"103"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"104","text":"105"},"Update the dependencies array to be: [dispatch]",{"range":"106","text":"107"},{"range":"108","text":"107"},{"range":"109","text":"107"},{"range":"110","text":"107"},{"range":"111","text":"107"},{"range":"112","text":"107"},{"range":"113","text":"107"},[1302,1304],"[demo, dispatch, isLoggedIn]",[1473,1475],"[dispatch]",[1644,1646],[1849,1851],[2062,2064],[2263,2265],[2410,2412],[2589,2591]]
{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Login/auth-Reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","ResponsesStatuses","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","setIsInitializedAC","updateTaskTC","domainModel","getState","task","tasks","find","t","console","warn","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","catch","err","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","demo","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","resultCode","succeeded","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","LinearProgress","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25ced085.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"3f338418-f98d-49bd-8d21-8909cba70bac\"\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>('/auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login');\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\ntype AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorUtilsActionType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorUtilsActionType>, data: ResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('eeeeeeeee'))\r\n    }\r\n\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorUtilsActionType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD_TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD_TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE_TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET_TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET_TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE_TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD_TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE_TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET_TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n\r\n            const tasks = res.data.items\r\n\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n\r\n\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//используем enam для читаемости кода. теперь в санках будет не просто число, а понятное описание,\r\n// на пример сейчас реализованно несколько строками ниже,\r\n// такой код: if (res.data.resultCode === ResponsesStatuses.succeeded) {\r\nenum ResponsesStatuses {\r\n    succeeded = 0,//можно писать самому, либо шторм покажет (см ниже)\r\n    error,\r\n    captcha = 10,\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            //if (res.data.resultCode === 0) { дописали enum чтоб было более читаемо\r\n            if (res.data.resultCode === ResponsesStatuses.succeeded) {\r\n\r\n                const action = addTaskAC(res.data.data.item)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))//уже нет..-теперь в finally\r\n\r\n            } else {\r\n                /*if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('eeeeeeeee'))\r\n                }\r\n                //dispatch(setAppStatusAC('failed')) --теперь в finally*/\r\n\r\n                handleServerAppError<{ item: TodolistType }>(dispatch, res.data)\r\n            }\r\n\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            /*    dispatch(setAppErrorAC(err.message))\r\n                //dispatch(setAppStatusAC('failed'))-теперь в finally\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })*/\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        dispatch(setAppStatusAC('loading'))\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET_IS_LOGGED_IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET_IS_LOGGED_IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error)\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-Reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n//status === loading - показываем крутилку\r\n//status === 'idle' |  'succeeded' | 'failed' - hide крутилку\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET_ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET/IS_INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            }\r\n        })\r\n        .catch(e => console.log(e))\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//-------------AC---------\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET_STATUS', status} as const)\r\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET_ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET/IS_INITIALIZED', isInitialized} as const)\r\n\r\n//--------------types------\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType = SetAppStatusActionType | SetAppErrorActionType | SetIsInitializedActionType\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n//imports-->initialState-->Reducer-->actions-->thunks-->types\r\n\r\n//initialState\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n//Reducer\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET_TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case 'REMOVE_TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD_TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE_TODOLIST_TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE_TODOLIST_FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE_TODOLIST_ENTITY_STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions------------\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE_TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD_TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE_TODOLIST_TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE_TODOLIST_FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET_TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_ENTITY_STATUS\",\r\n        id,\r\n        entityStatus,\r\n    } as const\r\n}\r\n\r\n// thunks--------------\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('eeeeeeeee'))\r\n                    }\r\n\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    /*if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('eeeeeeeee'))\r\n                    }\r\n\r\n                    dispatch(setAppStatusAC('failed'))*/\r\n                    handleServerAppError<{ item: TodolistType }>(dispatch, res.data)\r\n                }\r\n\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                /*dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC('failed'))*/\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('eeeeeeeee'))\r\n                    }\r\n\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistsStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistsStatusActionType\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    //entityStatus?: RequestStatusType\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus ===\"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus ===\"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }//demo from storybook\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    //проверка на залогиненость и возможный редирект\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n\r\n//-----------types---------\r\ntype PropsType = {\r\n    demo?: boolean\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true) -был не контролируемый, переписал логику\r\n    const dispatch = useDispatch()\r\n\r\n    //<стейт всего приложения, то что будет возвращаться>(то. что нужно достать)\r\n    const error = useSelector<AppRootStateType, null |string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        //setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","\r\n//переписать все импорты грамматно: из библиотек тянуть только нужные файлы\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-Reducer\";\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    // lib FORMIK\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Введите пароль. Обязательное поле';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Пароль должен быть больше 3 символов';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            //alert(JSON.stringify(values, null,2))\r\n            formik.resetForm();// зачистить поля после подтверждения формы\r\n        }\r\n    })\r\n\r\n    //проверка на залогиненость и возможный редирект\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    //lib material-ui\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n\r\n                {/*оборачиваем обычным тегом форм, чтоб подвязать с формиком*/}\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n\r\n                            //для формика:\r\n                            type=\"email\"\r\n\r\n                            /*этот код заменим на короткую запись - см 6строчек ниже\r\n                            name=\"email\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                            //доп для валидации\r\n                            onBlur={formik.handleBlur}*/\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {/*VALIDATION: если поле тронутое, но ввод не закончен & если невалидный ввод*/}\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{\"color\": \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n\r\n                            /*этот код заменим на короткую запись- см 7строчек ниже\r\n                            //для формика:\r\n                            name=\"password\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                            //доп для валидации\r\n                            onBlur={formik.handleBlur}*/\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {/*VALIDATION*/}\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{\"color\": \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n//---------TYPES------------\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-Reducer\";\r\n\r\nfunction App() {\r\n    //1 аргумент у useSelector-всегда state всего приложения, вторым- что возвращ этот хук\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Hello!\r\n                    </Typography>\r\n\r\n                    {/*если залогинен, то кнопка рвзлог*/}\r\n                    {isLoggedIn &&\r\n                    <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n\r\n                </Toolbar>\r\n\r\n                <ErrorSnackbar/>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() =>\r\n                        <h1 style={{'textAlign': 'center', 'fontSize': '50px'}}>404 page\r\n                            not found</h1>}/>\r\n\r\n                    <Redirect to={'/404'} from={'*'}/>\r\n                </Switch>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-Reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}